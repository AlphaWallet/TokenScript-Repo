<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:ts="http://tokenscript.org/2020/06/tokenscript"
        targetNamespace="http://tokenscript.org/2020/06/tokenscript"
        xmlns:xhtml="http://www.w3.org/1999/xhtml"
        xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"
        xmlns:asnx="urn:ietf:params:xml:ns:asnx"
        xmlns:ethereum="urn:ethereum:constantinople"
        elementFormDefault="qualified">

    <!-- Importing XML namespace for xml:lang and xml:id -->
    <import namespace="http://www.w3.org/XML/1998/namespace"
            schemaLocation="xml.xsd"/>

    <!-- Importing XML Signature namespace. Schema is from
        http://www.w3.org/TR/2008/REC-xmldsig-core-20080610/xmldsig-core-schema.xsd
    -->
    <import namespace="http://www.w3.org/2000/09/xmldsig#"
            schemaLocation="xmldsig-core-schema.xsd"/>

    <!-- Importing XHTML namespace. use xhtml1-strict.xsd to get xhtml:Block -->
    <import namespace="http://www.w3.org/1999/xhtml"
            schemaLocation="xhtml1-strict.xsd"/>

    <import namespace="urn:ietf:params:xml:ns:asnx"
            schemaLocation="asnx.xsd"/>

    <import namespace="urn:ethereum:constantinople"
            schemaLocation="ethereum.xsd"/>

    <include schemaLocation="data.xsd"/> <!-- soon to be replaced by data objects -->

    <element name="token">
        <complexType>
            <sequence>
                <element ref="asnx:module" minOccurs="0" maxOccurs="unbounded"/>
                <element name="label" type="ts:text"/>
                <element minOccurs="0" maxOccurs="unbounded" ref="ts:contract"/>
                <element name="origins">
                    <complexType>
                        <sequence>
                            <element ref="ts:ethereum"/>
                        </sequence>
                    </complexType>
                </element>
                <element minOccurs="0" maxOccurs="unbounded" ref="ts:selection"/>
                <element name="cards">
                    <complexType>
                        <sequence>
                            <element maxOccurs="unbounded" ref="ts:card"/>
                        </sequence>
                    </complexType>
                </element>
                <element minOccurs="0" ref="ts:grouping"/>
                <element minOccurs="0" ref="ts:ordering"/>
                <element minOccurs="0" maxOccurs="unbounded" ref="ts:attribute"/>
                <element minOccurs="0" maxOccurs="unbounded" ref="dsig:Signature"/>
            </sequence>
            <attribute name="custodian" type="boolean"/>
        </complexType>
        <key name="token-attributes">
            <selector xpath="ts:attribute"></selector>
            <field xpath="@name"></field>
        </key>
    </element>
    <element name="card">
        <complexType>
            <sequence>
                <element minOccurs="0" name="label" type="ts:text"/>
                <element minOccurs="0" maxOccurs="unbounded" ref="ts:attribute"/>
                <element minOccurs="0" maxOccurs="unbounded" ref="ts:selection"/>
                <!-- consider putting input and output in transaction
                     declaration later when/if DvP Security is
                     implemented.  At this stage, DvP security is not
                     implemented so whatever input and output here are
                     for the user interface only. One may argue that
                     this provides a false sense of security if we move
                     them to <transaction> too early -->
                <element minOccurs="0" name="input" type="ts:tokens"/>
                <element minOccurs="0" name="output" type="ts:tokens"/>
                <element minOccurs="0" ref="ts:transaction"/>
                <element minOccurs="0" maxOccurs="unbounded" ref="ts:item-view"/>
                <element minOccurs="0" maxOccurs="unbounded" ref="ts:view"/>
            </sequence>
            <attribute name="type">
                <simpleType>
                    <restriction base="string">
                        <enumeration value="token"/>
                        <enumeration value="action"/>
                        <enumeration value="activity"/>
                    </restriction>
                </simpleType>
            </attribute>
            <attribute name="exclude" type="IDREFS"/>
            <attribute name="name" type="NCName"/>
        </complexType>
    </element>
    <complexType name="tokens">
        <choice maxOccurs="unbounded" minOccurs="0">
            <element name="token">
                <complexType>
                    <choice>
                        <element name="ethereum">
                            <complexType>
                                <attribute name="network"/>
                            </complexType>
                        </element>
                        <element ref="ts:contract"/>
                    </choice>
                    <attribute name="name" type="ID"/>
                </complexType>
            </element>
        </choice>
    </complexType>
    <complexType name="text">
        <sequence>
            <element minOccurs="0" maxOccurs="unbounded" name="plurals">
                <complexType>
                    <sequence>
                        <element maxOccurs="unbounded" ref="ts:string"/>
                    </sequence>
                    <attribute use="required" ref="xml:lang"/>
                </complexType>
            </element>
            <element minOccurs="0" maxOccurs="unbounded" ref="ts:string"/>
        </sequence>
    </complexType>
    <element name="string">
        <complexType>
            <simpleContent>
                <extension base="string">
                    <attribute ref="xml:lang"/>
                    <attribute name="quantity" type="ts:quantity"/>
                </extension>
            </simpleContent>
        </complexType>
    </element>
    <simpleType name="quantity">
        <restriction base="string">
            <enumeration value="zero"/>
            <enumeration value="one"/>
            <enumeration value="two"/>
            <enumeration value="few"/>
            <enumeration value="many"/>
            <enumeration value="other"/>
        </restriction>
    </simpleType>
    <element name="contract">
        <complexType>
            <sequence>
                <element maxOccurs="unbounded" name="address">
                    <complexType mixed="true">
                        <attribute name="network" use="required" type="integer"/>
                    </complexType>
                </element>
                <element minOccurs="0" ref="ts:interface"/>
            </sequence>
            <attribute name="name" type="ID"/>
            <attribute name="interface" type="NCName"/>
        </complexType>
    </element>
    <element name="interface" type="NCName"/>
    <element name="include" type="NCName"/>
    <element name="view" type="ts:view"/>
    <element name="item-view" type="ts:view">
    </element>
    <complexType name="view">
        <sequence>
            <element minOccurs="0" maxOccurs="unbounded" ref="xhtml:style"/>
            <element minOccurs="0" maxOccurs="unbounded" ref="xhtml:script"/>
            <element minOccurs="0" ref="xhtml:body"/>
        </sequence>
        <attribute ref="xml:lang"/>
    </complexType>
    <element name="redeem">
        <complexType>
            <attribute name="format" use="required" type="NCName"/>
        </complexType>
    </element>
    <element name="exclude">
        <complexType>
            <attribute name="selection"/>
        </complexType>
    </element>
    <element name="feemaster" type="anyURI"/>
    <element name="gateway" type="anyURI"/>
    <element name="prefix" type="anyURI"/>
    <element name="selection">
        <complexType>
            <sequence>
                <element minOccurs="0" name="label" type="ts:text"/>
                <element minOccurs="0" name="denial" type="ts:text"/>
            </sequence>
            <attribute name="name" type="NCName"/>
            <attribute name="filter" type="string" use="required"></attribute>
        </complexType>
    </element>
    <element name="grouping">
        <complexType>
            <sequence>
                <element ref="ts:group"/>
            </sequence>
        </complexType>
    </element>
    <element name="group">
        <complexType>
            <sequence>
                <element ref="ts:consecutive_groups"/>
            </sequence>
            <attribute name="bitmask" use="required"/>
            <attribute name="name" use="required" type="NCName"/>
        </complexType>
    </element>
    <element name="consecutive_groups">
        <complexType/>
    </element>
    <element name="ordering">
        <complexType>
            <sequence>
                <element maxOccurs="unbounded" ref="ts:order"/>
            </sequence>
        </complexType>
    </element>
    <element name="order">
        <complexType>
            <sequence>
                <element minOccurs="0" ref="ts:byName"/>
                <element maxOccurs="unbounded" ref="ts:byValue"/>
            </sequence>
            <attribute name="bitmask" use="required"/>
            <attribute name="name" use="required" type="NCName"/>
        </complexType>
    </element>
    <element name="byName">
        <complexType>
            <attribute name="field" use="required" type="NCName"/>
        </complexType>
    </element>
    <element name="byValue">
        <complexType>
            <attribute name="field" use="required" type="NCName"/>
        </complexType>
    </element>
    <element name="attribute">
        <complexType>
            <sequence>
                <element name="type">
                    <complexType>
                        <sequence>
                            <element name="syntax"/>
                        </sequence>
                    </complexType>
                </element>
                <!-- label is not needed if the attribute is only used for selection -->
                <element minOccurs="0" name="label" type="ts:text"/>
                <element ref="ts:origins"/>
            </sequence>
            <attribute name="name" use="required" type="NCName"/>
            <attribute name="oid" type="NMTOKEN"/>
        </complexType>
    </element>
    <simpleType name="syntax">
        <restriction base="NMTOKEN">
            <enumeration value="1.3.6.1.4.1.1466.115.121.1.7"/><!-- Boolean -->
            <enumeration value="1.3.6.1.4.1.1466.115.121.1.15"/><!-- DirectoryString -->
            <enumeration value="1.3.6.1.4.1.1466.115.121.1.24"/><!-- GeneralizedTime -->
            <enumeration value="1.3.6.1.4.1.1466.115.121.1.27"/><!-- Integer -->
            <enumeration value="1.3.6.1.4.1.1466.115.121.1.36"/><!-- NumericString -->
        </restriction>
    </simpleType>
    <element name="transaction">
        <complexType>
            <choice>
                <element ref="ethereum:transaction"/>
            </choice>
        </complexType>
    </element>
    <element name="origins">
        <complexType>
            <choice maxOccurs="unbounded">
                <element ref="ethereum:event"/>
                <element ref="ethereum:call"/>
                <element ref="ts:user-entry"/>
                <element ref="ts:token-id"/>
            </choice>
        </complexType>
    </element>
    <simpleType name="bitmask">
        <restriction base="hexBinary"/>
    </simpleType>
    <element name="user-entry">
        <complexType>
            <sequence>
                <element minOccurs="0" ref="ts:mapping"/>
            </sequence>
            <attribute name="as" type="ts:as" use="required"/>
        </complexType>
    </element>
    <element name="token-id">
        <complexType>
            <sequence>
                <element minOccurs="0" ref="ts:mapping"/>
            </sequence>
            <attribute name="as" type="ts:as" use="required"/>
            <attribute name="bitmask" type="ts:bitmask"/>
        </complexType>
    </element>
    <element name="ethereum">
        <complexType>
            <attribute name="as" type="ts:as"/>
            <attribute name="bitmask" type="ts:bitmask"/>
            <attribute name="contract" type="IDREF"/>
            <attribute name="function" type="NCName"/>
            <attribute name="event" type="NCName"/>
            <attribute name="filter" type="string"/>
            <!-- TODO: this should be whatever ASN.X allows as element name -->
            <attribute name="select" type="NCName"/>
        </complexType>
    </element>
    <complexType name="address" mixed="true">
        <attribute name="ref" type="NCName"/>
    </complexType>
</schema>
